/// <reference types="react" />
export declare const CustomMessage: import("react").MemoExoticComponent<(props: import("./CustomMessage").IProps) => any>;
export declare const ValidationContext: import("react").MemoExoticComponent<import("react").ForwardRefExoticComponent<Pick<import("./ValidationContext").IProps, "children" | "key" | "config"> & import("react").RefAttributes<import("./ValidationContext").IValidationContextRef>>>;
export declare const useValidation: ({ name, value, validation, validationContext, validationAttributeNames, errorMessage: errorProp, children }: import("./interfaces/props").IPropsFieldBase<{}>) => {
    isValid: boolean;
    errorMessage: string;
    showError: boolean;
    dirty: boolean;
    setDirty: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    submitted: boolean;
};
export declare const useMask: ({ mask, value }: import("./hooks/useMask").IUseMaskParams) => {
    maskApply: (value: string | number) => string;
    maskClean: (value: string) => string | number;
    maskedValue: any;
    cleanedValue: any;
};
export declare const ConfigProvider: import("react").NamedExoticComponent<import("./ConfigProvider").IConfigProviderProps>;
export declare const ConfigBuilder: typeof import("./ConfigProvider/builder").default;
