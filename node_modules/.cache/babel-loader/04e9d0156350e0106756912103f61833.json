{"ast":null,"code":"import axios from \"../utils/axios\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport { GET_ERRORS, SET_CURRENT_USER, CLEAR_ERRORS } from \"./types\"; // Login - Get User Token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(`/personnel/login`, userData).then(res => {\n    console.log(res.data); // Save to localStorage\n\n    const token = res.data.accessToken; // Set token to ls\n\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n    window.location.href = \"/\";\n  }).catch(err => {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n\n    if (err.response) {\n      return err.response;\n    }\n  });\n};\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from localStorage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({})); //redirect user to login page\n\n  window.location.href = \"/login\";\n};","map":{"version":3,"sources":["/home/kim/Documents/Projects/julius/src/actions/authActions.js"],"names":["axios","jwt_decode","setAuthToken","GET_ERRORS","SET_CURRENT_USER","CLEAR_ERRORS","loginUser","userData","dispatch","post","then","res","console","log","data","token","accessToken","localStorage","setItem","decoded","setCurrentUser","window","location","href","catch","err","type","payload","response","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AAEA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAGC,QAAQ,IAAIC,QAAQ,IAAI;AAC5CR,EAAAA,KAAK,CACHS,IADF,CACQ,kBADR,EAC2BF,QAD3B,EAEEG,IAFF,CAEOC,GAAG,IAAI;AAEXC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB,EAFW,CAGX;;AACA,UAAMC,KAAK,GAAGJ,GAAG,CAACG,IAAJ,CAASE,WAAvB,CAJW,CAKX;;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC,EANW,CAOX;;AACAb,IAAAA,YAAY,CAACa,KAAD,CAAZ,CARW,CASX;;AACA,UAAMI,OAAO,GAAGlB,UAAU,CAACc,KAAD,CAA1B,CAVW,CAWX;;AACAP,IAAAA,QAAQ,CAACY,cAAc,CAACD,OAAD,CAAf,CAAR;AAEAE,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AAGD,GAnBF,EAoBEC,KApBF,CAoBQC,GAAG,IAAI;AACZjB,IAAAA,QAAQ,CAAC;AACPkB,MAAAA,IAAI,EAAEvB,UADC;AAEPwB,MAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAad;AAFf,KAAD,CAAR;;AAIA,QAAIW,GAAG,CAACG,QAAR,EAAkB;AAChB,aAAOH,GAAG,CAACG,QAAX;AACD;AACF,GA5BF;AA6BF,CA9BI;AAgCL,OAAO,MAAMR,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLO,IAAAA,IAAI,EAAEtB,gBADD;AAELuB,IAAAA,OAAO,EAAER;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAMU,UAAU,GAAG,MAAMrB,QAAQ,IAAI;AAC1C;AACAS,EAAAA,YAAY,CAACa,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACA5B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAM,EAAAA,QAAQ,CAACY,cAAc,CAAC,EAAD,CAAf,CAAR,CAN0C,CAO1C;;AACAC,EAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACD,CATM","sourcesContent":["import axios from \"../utils/axios\";\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"../utils/setAuthToken\";\n\nimport { GET_ERRORS, SET_CURRENT_USER, CLEAR_ERRORS } from \"./types\";\n\n// Login - Get User Token\nexport const loginUser = userData => dispatch => {\n     axios\n      .post(`/personnel/login`, userData)\n      .then(res => {\n\n        console.log(res.data)\n        // Save to localStorage\n        const token = res.data.accessToken;\n        // Set token to ls\n        localStorage.setItem(\"jwtToken\", token);\n        // Set token to Auth header\n        setAuthToken(token);\n        // Decode token to get user data\n        const decoded = jwt_decode(token);\n        // Set current user\n        dispatch(setCurrentUser(decoded));\n\n        window.location.href = \"/\";\n\n     \n      })\n      .catch(err => {\n        dispatch({\n          type: GET_ERRORS,\n          payload: err.response.data\n        });\n        if (err.response) {\n          return err.response;\n        }\n      });\n  };\n\n  export const setCurrentUser = decoded => {\n    return {\n      type: SET_CURRENT_USER,\n      payload: decoded\n    };\n  };\n  \n  // Log user out\n  export const logoutUser = () => dispatch => {\n    // Remove token from localStorage\n    localStorage.removeItem(\"jwtToken\");\n    // Remove auth header for future requests\n    setAuthToken(false);\n    // Set current user to {} which will set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n    //redirect user to login page\n    window.location.href = \"/login\";\n  };\n  "]},"metadata":{},"sourceType":"module"}