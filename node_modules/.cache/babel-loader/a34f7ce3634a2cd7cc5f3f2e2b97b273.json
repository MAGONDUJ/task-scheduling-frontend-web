{"ast":null,"code":"const primaryColor = [\"#9c27b0\", \"#ab47bc\", \"#8e24aa\", \"#af2cc5\", \"#7b1fa2\"];\nconst dangerColor = [\"#f44336\", \"#ef5350\", \"#e53935\", \"#f55a4e\", \"#d32f2f\", \"#ebcccc\", \"#f2dede\"];\nconst successColor = [\"#4caf50\", \"#66bb6a\", \"#43a047\", \"#5cb860\", \"#388e3c\", \"#d0e9c6\", \"#dff0d8\"];\nconst defaultFont = {\n  fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n  fontWeight: \"300\",\n  lineHeight: \"1.5em\"\n};\nconst whiteColor = \"#FFF\";\nconst grayColor = [\"#999\", \"#777\", \"#3C4858\", \"#AAAAAA\", \"#D2D2D2\", \"#DDD\", \"#555555\", \"#333\", \"#eee\", \"#ccc\", \"#e4e4e4\", \"#E5E5E5\", \"#f9f9f9\", \"#f5f5f5\", \"#495057\", \"#e7e7e7\", \"#212121\", \"#c8c8c8\", \"#505050\"];\nconst infoColor = [\"#00acc1\", \"#26c6da\", \"#00acc1\", \"#00d3ee\", \"#0097a7\", \"#c4e3f3\", \"#d9edf7\"];\nconst roseColor = [\"#e91e63\", \"#ec407a\", \"#d81b60\", \"#eb3573\", \"#c2185b\"];\nconst warningColor = [\"#ff9800\", \"#ffa726\", \"#fb8c00\", \"#ffa21a\", \"#f57c00\", \"#faf2cc\", \"#fcf8e3\"];\nconst blackColor = \"#000\";\n\nconst hexToRgb = input => {\n  input = input + \"\";\n  input = input.replace(\"#\", \"\");\n  let hexRegex = /[0-9A-Fa-f]/g;\n\n  if (!hexRegex.test(input) || input.length !== 3 && input.length !== 6) {\n    throw new Error(\"input is not a valid hex color.\");\n  }\n\n  if (input.length === 3) {\n    let first = input[0];\n    let second = input[1];\n    let last = input[2];\n    input = first + first + second + second + last + last;\n  }\n\n  input = input.toUpperCase(input);\n  let first = input[0] + input[1];\n  let second = input[2] + input[3];\n  let last = input[4] + input[5];\n  return parseInt(first, 16) + \", \" + parseInt(second, 16) + \", \" + parseInt(last, 16);\n};\n\nconst cardTitle = { ...title,\n  marginTop: \"0\",\n  marginBottom: \"3px\",\n  minHeight: \"auto\",\n  \"& a\": { ...title,\n    marginTop: \".625rem\",\n    marginBottom: \"0.75rem\",\n    minHeight: \"auto\",\n    cardTitle\n  }\n};\nexport { primaryColor, dangerColor, successColor, defaultFont, whiteColor, grayColor, infoColor, hexToRgb, blackColor, warningColor, roseColor };","map":{"version":3,"sources":["/home/kim/Documents/Projects/julius/src/assets/jss/task_app/task_app.js"],"names":["primaryColor","dangerColor","successColor","defaultFont","fontFamily","fontWeight","lineHeight","whiteColor","grayColor","infoColor","roseColor","warningColor","blackColor","hexToRgb","input","replace","hexRegex","test","length","Error","first","second","last","toUpperCase","parseInt","cardTitle","title","marginTop","marginBottom","minHeight"],"mappings":"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","sourcesContent":["const primaryColor = [\"#9c27b0\", \"#ab47bc\", \"#8e24aa\", \"#af2cc5\", \"#7b1fa2\"];\nconst dangerColor = [\n    \"#f44336\",\n    \"#ef5350\",\n    \"#e53935\",\n    \"#f55a4e\",\n    \"#d32f2f\",\n    \"#ebcccc\",\n    \"#f2dede\"\n  ];\n  const successColor = [\n    \"#4caf50\",\n    \"#66bb6a\",\n    \"#43a047\",\n    \"#5cb860\",\n    \"#388e3c\",\n    \"#d0e9c6\",\n    \"#dff0d8\"\n  ];\n  const defaultFont = {\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    fontWeight: \"300\",\n    lineHeight: \"1.5em\"\n  };\n  const whiteColor = \"#FFF\";\n  const grayColor = [\n    \"#999\",\n    \"#777\",\n    \"#3C4858\",\n    \"#AAAAAA\",\n    \"#D2D2D2\",\n    \"#DDD\",\n    \"#555555\",\n    \"#333\",\n    \"#eee\",\n    \"#ccc\",\n    \"#e4e4e4\",\n    \"#E5E5E5\",\n    \"#f9f9f9\",\n    \"#f5f5f5\",\n    \"#495057\",\n    \"#e7e7e7\",\n    \"#212121\",\n    \"#c8c8c8\",\n    \"#505050\"\n  ];\n\n  const infoColor = [\n    \"#00acc1\",\n    \"#26c6da\",\n    \"#00acc1\",\n    \"#00d3ee\",\n    \"#0097a7\",\n    \"#c4e3f3\",\n    \"#d9edf7\"\n  ];\n  const roseColor = [\"#e91e63\", \"#ec407a\", \"#d81b60\", \"#eb3573\", \"#c2185b\"];\n  const warningColor = [\n    \"#ff9800\",\n    \"#ffa726\",\n    \"#fb8c00\",\n    \"#ffa21a\",\n    \"#f57c00\",\n    \"#faf2cc\",\n    \"#fcf8e3\"\n  ];\n  const blackColor = \"#000\";\n\n  const hexToRgb = input => {\n    input = input + \"\";\n    input = input.replace(\"#\", \"\");\n    let hexRegex = /[0-9A-Fa-f]/g;\n    if (!hexRegex.test(input) || (input.length !== 3 && input.length !== 6)) {\n      throw new Error(\"input is not a valid hex color.\");\n    }\n    if (input.length === 3) {\n      let first = input[0];\n      let second = input[1];\n      let last = input[2];\n      input = first + first + second + second + last + last;\n    }\n    input = input.toUpperCase(input);\n    let first = input[0] + input[1];\n    let second = input[2] + input[3];\n    let last = input[4] + input[5];\n    return (\n      parseInt(first, 16) +\n      \", \" +\n      parseInt(second, 16) +\n      \", \" +\n      parseInt(last, 16)\n    );\n  };\n\n  const cardTitle = {\n    ...title,\n    marginTop: \"0\",\n    marginBottom: \"3px\",\n    minHeight: \"auto\",\n    \"& a\": {\n      ...title,\n      marginTop: \".625rem\",\n      marginBottom: \"0.75rem\",\n      minHeight: \"auto\",\n      cardTitle\n    }\n  };\n  export{\n    primaryColor,\n    dangerColor,\n    successColor,\n    defaultFont,\n    whiteColor,\n    grayColor,\n    infoColor,\n    hexToRgb,\n    blackColor,\n    warningColor,\n    roseColor\n  }"]},"metadata":{},"sourceType":"module"}